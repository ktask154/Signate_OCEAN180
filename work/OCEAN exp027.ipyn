{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOWfsD3UB3COKab/tJlv+li"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SQDTLUOzLLz0","executionInfo":{"status":"ok","timestamp":1675319502979,"user_tz":-540,"elapsed":2833,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}},"outputId":"e821073b-07e5-438f-c930-449f47b0b5af"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import os\n","\n","DIR = \"/content/drive/MyDrive/Competitions/Signate/OCEAN180\"\n","INPUT_DIR = os.path.join(DIR,\"input\")\n","OUTPUT_DIR = os.path.join(DIR,\"output\")\n","\n","if not os.path.exists(OUTPUT_DIR):\n","    os.makedirs(OUTPUT_DIR)"],"metadata":{"id":"hbXqLNc9LgRv","executionInfo":{"status":"ok","timestamp":1675319502979,"user_tz":-540,"elapsed":6,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from tqdm import tqdm\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","import seaborn as sns"],"metadata":{"id":"zFeAQyd7MWlG","executionInfo":{"status":"ok","timestamp":1675319504057,"user_tz":-540,"elapsed":1082,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["train = pd.read_csv(os.path.join(INPUT_DIR,\"train_data.csv\"))\n","test = pd.read_csv(os.path.join(INPUT_DIR,\"test_data.csv\"))\n","sample_sub = pd.read_csv(os.path.join(INPUT_DIR,\"submit_example.csv\"), header=None)\n","\n","print(train.shape)\n","display(train.head(3))\n","\n","print(test.shape)\n","display(test.head(3))\n","\n","print(sample_sub.shape)\n","display(sample_sub.head(3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":660},"id":"ruY-5oDWMtCw","executionInfo":{"status":"ok","timestamp":1675319533277,"user_tz":-540,"elapsed":29221,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}},"outputId":"593aa1d7-bfe8-47ad-d054-0a7b866964d4"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["(14140, 3465)\n"]},{"output_type":"display_data","data":{"text/plain":["   Unnamed: 0        lat         lon  area                 YMD    year  month  \\\n","0           0  24.989139  125.243167  20.0            20110926  2011.0    9.0   \n","1           1  26.996172  127.912024  40.0  2009.7.6-2009.7.28  2009.0    7.0   \n","2           2  26.363556  127.735139  20.0            20091014  2009.0   10.0   \n","\n","   cover  depth_original  cliff_length  ...  MIN_NormG_2020  MIN_NormR_2020  \\\n","0  0.050             NaN           0.0  ...        0.507961        0.287288   \n","1  0.725             NaN           0.0  ...        0.353645        0.245048   \n","2  0.025             NaN           0.0  ...        0.579204        0.281260   \n","\n","   MIN_PPR_2020  MIN_PSNDc2_2020  MIN_RDVI_2020  MIN_IF_2020  MIN_SLAVI_2020  \\\n","0     -0.278071        -0.808075      -2.341663     2.353039       95.142525   \n","1     -0.100556        -0.771423      -3.282602     4.672225      174.767501   \n","2     -0.191884        -0.853730      -3.160207     3.324236       62.711236   \n","\n","   MIN_SIPI2_2020  MIN_VARIgreen_2020   mesh20  \n","0        3.728732           -2.405135  3725_10  \n","1       -0.571513            0.448861  4027_13  \n","2        3.284478          -57.136191  3927_22  \n","\n","[3 rows x 3465 columns]"],"text/html":["\n","  <div id=\"df-2cdeea02-3aaa-4598-951e-f5680309adc3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>lat</th>\n","      <th>lon</th>\n","      <th>area</th>\n","      <th>YMD</th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>cover</th>\n","      <th>depth_original</th>\n","      <th>cliff_length</th>\n","      <th>...</th>\n","      <th>MIN_NormG_2020</th>\n","      <th>MIN_NormR_2020</th>\n","      <th>MIN_PPR_2020</th>\n","      <th>MIN_PSNDc2_2020</th>\n","      <th>MIN_RDVI_2020</th>\n","      <th>MIN_IF_2020</th>\n","      <th>MIN_SLAVI_2020</th>\n","      <th>MIN_SIPI2_2020</th>\n","      <th>MIN_VARIgreen_2020</th>\n","      <th>mesh20</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>24.989139</td>\n","      <td>125.243167</td>\n","      <td>20.0</td>\n","      <td>20110926</td>\n","      <td>2011.0</td>\n","      <td>9.0</td>\n","      <td>0.050</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.507961</td>\n","      <td>0.287288</td>\n","      <td>-0.278071</td>\n","      <td>-0.808075</td>\n","      <td>-2.341663</td>\n","      <td>2.353039</td>\n","      <td>95.142525</td>\n","      <td>3.728732</td>\n","      <td>-2.405135</td>\n","      <td>3725_10</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>26.996172</td>\n","      <td>127.912024</td>\n","      <td>40.0</td>\n","      <td>2009.7.6-2009.7.28</td>\n","      <td>2009.0</td>\n","      <td>7.0</td>\n","      <td>0.725</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.353645</td>\n","      <td>0.245048</td>\n","      <td>-0.100556</td>\n","      <td>-0.771423</td>\n","      <td>-3.282602</td>\n","      <td>4.672225</td>\n","      <td>174.767501</td>\n","      <td>-0.571513</td>\n","      <td>0.448861</td>\n","      <td>4027_13</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>26.363556</td>\n","      <td>127.735139</td>\n","      <td>20.0</td>\n","      <td>20091014</td>\n","      <td>2009.0</td>\n","      <td>10.0</td>\n","      <td>0.025</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.579204</td>\n","      <td>0.281260</td>\n","      <td>-0.191884</td>\n","      <td>-0.853730</td>\n","      <td>-3.160207</td>\n","      <td>3.324236</td>\n","      <td>62.711236</td>\n","      <td>3.284478</td>\n","      <td>-57.136191</td>\n","      <td>3927_22</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3 rows × 3465 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2cdeea02-3aaa-4598-951e-f5680309adc3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-2cdeea02-3aaa-4598-951e-f5680309adc3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2cdeea02-3aaa-4598-951e-f5680309adc3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["(4039, 3464)\n"]},{"output_type":"display_data","data":{"text/plain":["   Unnamed: 0        lat         lon   area  \\\n","0           0  24.352222  124.202674   20.0   \n","1           1  24.420028  124.078583   20.0   \n","2           2  26.494197  127.836013  100.0   \n","\n","                                                 YMD    year  month  \\\n","0                                            2002.12  2002.0   12.0   \n","1                                           20100723  2010.0    7.0   \n","2  2004.2.20-2004.2.22,2004.2.27-2004.2.29,2004.3...  2004.0    2.0   \n","\n","   depth_original  cliff_length  aicial_length  ...  MIN_NormG_2020  \\\n","0             0.5      0.000000     725.621704  ...        0.409346   \n","1             NaN      0.000000       0.000000  ...        0.540733   \n","2            13.8     73.183418      80.595177  ...        0.601792   \n","\n","   MIN_NormR_2020  MIN_PPR_2020  MIN_PSNDc2_2020  MIN_RDVI_2020  MIN_IF_2020  \\\n","0        0.323023     -0.066356        -0.560810      -3.203797     4.297234   \n","1        0.275585     -0.291240        -0.824888      -2.222276     2.263106   \n","2        0.252251     -0.318454        -0.861477      -2.060505     2.099250   \n","\n","   MIN_SLAVI_2020  MIN_SIPI2_2020  MIN_VARIgreen_2020   mesh20  \n","0      926.905329        1.669992            0.194766  3624_20  \n","1       57.661693        4.274851          -79.273275  3624_20  \n","2       42.672829        5.655713           -2.061417  3927_23  \n","\n","[3 rows x 3464 columns]"],"text/html":["\n","  <div id=\"df-f283f992-43a6-4615-b110-446f0f531000\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>lat</th>\n","      <th>lon</th>\n","      <th>area</th>\n","      <th>YMD</th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>depth_original</th>\n","      <th>cliff_length</th>\n","      <th>aicial_length</th>\n","      <th>...</th>\n","      <th>MIN_NormG_2020</th>\n","      <th>MIN_NormR_2020</th>\n","      <th>MIN_PPR_2020</th>\n","      <th>MIN_PSNDc2_2020</th>\n","      <th>MIN_RDVI_2020</th>\n","      <th>MIN_IF_2020</th>\n","      <th>MIN_SLAVI_2020</th>\n","      <th>MIN_SIPI2_2020</th>\n","      <th>MIN_VARIgreen_2020</th>\n","      <th>mesh20</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>24.352222</td>\n","      <td>124.202674</td>\n","      <td>20.0</td>\n","      <td>2002.12</td>\n","      <td>2002.0</td>\n","      <td>12.0</td>\n","      <td>0.5</td>\n","      <td>0.000000</td>\n","      <td>725.621704</td>\n","      <td>...</td>\n","      <td>0.409346</td>\n","      <td>0.323023</td>\n","      <td>-0.066356</td>\n","      <td>-0.560810</td>\n","      <td>-3.203797</td>\n","      <td>4.297234</td>\n","      <td>926.905329</td>\n","      <td>1.669992</td>\n","      <td>0.194766</td>\n","      <td>3624_20</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>24.420028</td>\n","      <td>124.078583</td>\n","      <td>20.0</td>\n","      <td>20100723</td>\n","      <td>2010.0</td>\n","      <td>7.0</td>\n","      <td>NaN</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>0.540733</td>\n","      <td>0.275585</td>\n","      <td>-0.291240</td>\n","      <td>-0.824888</td>\n","      <td>-2.222276</td>\n","      <td>2.263106</td>\n","      <td>57.661693</td>\n","      <td>4.274851</td>\n","      <td>-79.273275</td>\n","      <td>3624_20</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>26.494197</td>\n","      <td>127.836013</td>\n","      <td>100.0</td>\n","      <td>2004.2.20-2004.2.22,2004.2.27-2004.2.29,2004.3...</td>\n","      <td>2004.0</td>\n","      <td>2.0</td>\n","      <td>13.8</td>\n","      <td>73.183418</td>\n","      <td>80.595177</td>\n","      <td>...</td>\n","      <td>0.601792</td>\n","      <td>0.252251</td>\n","      <td>-0.318454</td>\n","      <td>-0.861477</td>\n","      <td>-2.060505</td>\n","      <td>2.099250</td>\n","      <td>42.672829</td>\n","      <td>5.655713</td>\n","      <td>-2.061417</td>\n","      <td>3927_23</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3 rows × 3464 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f283f992-43a6-4615-b110-446f0f531000')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f283f992-43a6-4615-b110-446f0f531000 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f283f992-43a6-4615-b110-446f0f531000');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["(4039, 2)\n"]},{"output_type":"display_data","data":{"text/plain":["   0     1\n","0  0  0.47\n","1  1  0.68\n","2  2  0.25"],"text/html":["\n","  <div id=\"df-4365e6c8-3c87-4884-b53a-f56afac77a3e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0.47</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0.68</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>0.25</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4365e6c8-3c87-4884-b53a-f56afac77a3e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4365e6c8-3c87-4884-b53a-f56afac77a3e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4365e6c8-3c87-4884-b53a-f56afac77a3e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}]},{"cell_type":"code","source":["train.rename(columns={\"Unnamed: 0\":\"id\"}, inplace=True)\n","test.rename(columns={\"Unnamed: 0\":\"id\"}, inplace=True)"],"metadata":{"id":"Uco2Vx9gPTG0","executionInfo":{"status":"ok","timestamp":1675319533278,"user_tz":-540,"elapsed":17,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["def missing_func(df):\n","  total = df.isnull().sum().sort_values(ascending=False)\n","  percent = (df.isnull().sum()/df.isnull().count()).sort_values(ascending=False)\n","  df_missing = pd.concat([total,percent],axis=1,keys=['total','percent'])\n","  return df_missing "],"metadata":{"id":"-_m_joBtSsSw","executionInfo":{"status":"ok","timestamp":1675319533278,"user_tz":-540,"elapsed":15,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["train_missing = missing_func(train)\n","test_missing = missing_func(test)"],"metadata":{"id":"0e5FJZJMVfRD","executionInfo":{"status":"ok","timestamp":1675319534230,"user_tz":-540,"elapsed":967,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["train_cols = train.columns.tolist()\n","test_cols = test.columns.tolist()\n","\n","target = set(train_cols) - set(test_cols)\n","print(target)\n","\n","display(train[target].head(3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":161},"id":"lnoSoatcQBlL","executionInfo":{"status":"ok","timestamp":1675319534231,"user_tz":-540,"elapsed":5,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}},"outputId":"26a13558-77da-4a9a-9beb-050202733560"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["{'cover'}\n"]},{"output_type":"display_data","data":{"text/plain":["   cover\n","0  0.050\n","1  0.725\n","2  0.025"],"text/html":["\n","  <div id=\"df-d33c540f-1678-4397-ab9b-22ad70ca9a62\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cover</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.050</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.725</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.025</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d33c540f-1678-4397-ab9b-22ad70ca9a62')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d33c540f-1678-4397-ab9b-22ad70ca9a62 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d33c540f-1678-4397-ab9b-22ad70ca9a62');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}]},{"cell_type":"code","source":["train_area_mean = train.area.mean()\n","test_area_mean = test.area.mean()\n","area_mean = (train_area_mean + test_area_mean) / 2\n","train[\"area\"] = train[\"area\"].fillna(area_mean)\n","test[\"area\"] = test[\"area\"].fillna(area_mean)\n","\n","train[\"cover_area\"] = train.cover * train.area\n","train[\"cover_area_log\"] = np.log1p(train['cover_area'])"],"metadata":{"id":"54wNf69pdEsa","executionInfo":{"status":"ok","timestamp":1675319534231,"user_tz":-540,"elapsed":4,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["sns.distplot(train[\"cover_area_log\"])\n","\n","print(\"max : %f\" %train[\"cover_area_log\"].max())\n","print(\"min : %f\" %train[\"cover_area_log\"].min())\n","print('Skewness: %f' %train[\"cover_area_log\"].skew())  #歪度\n","print('Kurtosis: %f' %train[\"cover_area_log\"].kurt())  #尖度"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":409},"id":"VwRy-B_gWTU8","executionInfo":{"status":"ok","timestamp":1675319534690,"user_tz":-540,"elapsed":462,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}},"outputId":"d8e6c1ff-9e07-4738-c7ee-7fb59305a905"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["max : 3.713572\n","min : 0.000000\n","Skewness: 1.030917\n","Kurtosis: -0.204865\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n","  warnings.warn(msg, FutureWarning)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["train[\"adv_flag\"] = 0\n","test[\"adv_flag\"] = 1\n","\n","df = pd.concat([train,test]).reset_index(drop=True)"],"metadata":{"id":"mjzZLQYmIR4e","executionInfo":{"status":"ok","timestamp":1675319534961,"user_tz":-540,"elapsed":274,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["train_missing_50 = train_missing[train_missing.percent<0.5].index\n","test_missing_50 =  test_missing[test_missing.percent<0.5].index\n","\n","categorical_features = train.dtypes[train.dtypes==\"object\"].index\n","\n","features = set(train_missing_50) & set(test_missing_50)\n","features = set(features) - set(categorical_features) "],"metadata":{"id":"2QjI9EzHUu_F","executionInfo":{"status":"ok","timestamp":1675319535380,"user_tz":-540,"elapsed":420,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["len(features)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g_3gZGvRXsjN","executionInfo":{"status":"ok","timestamp":1675319535380,"user_tz":-540,"elapsed":8,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}},"outputId":"190a404f-0e22-4f58-c6ba-0a84a18bdfb0"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3159"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["land_sat_feats = []\n","for years in list(range(2000,2021)):\n","  n_f = [col for col in features if str(years) in col]\n","  land_sat_feats += n_f\n","features = [col for col in features if col not in land_sat_feats]"],"metadata":{"id":"YdNtZOG6Too4","executionInfo":{"status":"ok","timestamp":1675319535380,"user_tz":-540,"elapsed":6,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["len(features)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mG9R7fv3VjbB","executionInfo":{"status":"ok","timestamp":1675319535380,"user_tz":-540,"elapsed":5,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}},"outputId":"1a76bad6-3c83-429f-f93c-d74becf70790"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["309"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","source":["## Model"],"metadata":{"id":"4nQFYilGcZhp"}},{"cell_type":"code","source":["#!pip install iterative-stratification"],"metadata":{"id":"n-WRC691iE81","executionInfo":{"status":"ok","timestamp":1675319535381,"user_tz":-540,"elapsed":5,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["import lightgbm as lgb\n","from sklearn.model_selection import StratifiedKFold, GroupKFold, StratifiedGroupKFold, KFold\n","#from iterstrat.ml_stratifiers import MultilabelStratifiedKFold\n","from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import f1_score, precision_score, recall_score"],"metadata":{"id":"Y-GaIe8HcydD","executionInfo":{"status":"ok","timestamp":1675319535381,"user_tz":-540,"elapsed":4,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["class CFG:\n","  ver=27\n","  model=\"lightgbm\"\n","  n_folds=4\n","  trn_fold=[0, 1, 2, 3]\n","  seed=42\n","  target_cols1=\"adv_flag\"\n","  target_cols2=\"cover_area_log\"\n","  boosting_type=\"gbdt\"\n","  fold_target1=\"adv_flag\"\n","  fold_target2=\"cover_area_log\"\n","  fold_target3=\"cover\""],"metadata":{"id":"bUzomSmacuOD","executionInfo":{"status":"ok","timestamp":1675319535381,"user_tz":-540,"elapsed":4,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["# =========================================================================================\n","# CV split\n","# =========================================================================================\n","def get_fold(df,fold_target, isFlag=False):\n","  if isFlag:\n","    Fold = StratifiedGroupKFold(n_splits=CFG.n_folds, shuffle=True, random_state=CFG.seed)\n","    for n, (train_index, val_index) in enumerate(Fold.split(df, df[fold_target], groups=df[\"mesh20\"])):\n","        df.loc[val_index, 'fold'] = int(n)\n","  else:\n","    Fold = KFold(n_splits=CFG.n_folds, shuffle=True, random_state=CFG.seed)\n","    for n, (train_index, val_index) in enumerate(Fold.split(df)):\n","      df.loc[val_index, 'fold'] = int(n)\n","  df['fold'] = df['fold'].astype(int)\n","  display(df.groupby('fold').size())\n","  return df"],"metadata":{"id":"6jUbQwctcc66","executionInfo":{"status":"ok","timestamp":1675319535381,"user_tz":-540,"elapsed":4,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["def get_score(labels, preds, isFlag=False):\n","  if isFlag:\n","    f1score = f1_score(labels, preds)\n","    pscore = precision_score(labels, preds)\n","    rscore =recall_score(labels, preds)\n","    print(f\"F1 Score : {f1score}\")\n","    print(f\"Precision Score : {pscore}\")\n","    print(f\"Recall Score {rscore}\")\n","  else:\n","    rmse = np.sqrt(mean_squared_error(labels, preds))\n","    print(f\"RMSE {rmse}\")"],"metadata":{"id":"3kb0e7uoNq6i","executionInfo":{"status":"ok","timestamp":1675319535381,"user_tz":-540,"elapsed":4,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["#features = list(features)\n","features.remove('id')\n","#features.remove('area')\n","#features.remove(\"year\")\n","#features.remove(\"month\")\n","features.append(\"mesh20\")"],"metadata":{"id":"UalSVf7cnMOP","executionInfo":{"status":"ok","timestamp":1675319535795,"user_tz":-540,"elapsed":418,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["params1 = {\n","        'objective': \"binary\",\n","        'metric': 'binary_logloss',\n","        'learning_rate': 0.1,\n","        'boosting': CFG.boosting_type,\n","        'seed': CFG.seed,\n","        \"reg_alpha\":0.5,\n","        \"n_estimators\":1000\n","    }\n","\n","params2 = {\n","        'objective': 'regression',\n","        'metric': 'rmse',\n","        'learning_rate': 0.1,\n","        'boosting': CFG.boosting_type,\n","        'seed': CFG.seed,\n","        \"reg_alpha\":0.5,\n","        \"n_estimators\":1000\n","    }"],"metadata":{"id":"OJEn3jDCn4RL","executionInfo":{"status":"ok","timestamp":1675319535795,"user_tz":-540,"elapsed":6,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["def get_pred(df, test, fold_target, target_cols, model, isFlag=False):\n","  if isFlag:\n","    pred_name = \"flag\"\n","    train = get_fold(df, fold_target, isFlag=True)\n","  else:\n","    pred_name = \"\"\n","    train = get_fold(df, fold_target, isFlag=False)\n","  oof_df = pd.DataFrame()\n","  df_importance = pd.DataFrame({'feature': features})\n","  df_importance['importance'] = 0\n","  test_preds = np.zeros((len(test), CFG.n_folds))\n","\n","  ctg_list = [\"year\",\"month\",\"mesh20\"]\n","\n","  for fold in range(CFG.n_folds):\n","    if fold in CFG.trn_fold:\n","      print(\"=\"*15,f\" FOLD : {fold} \",\"=\"*15)\n","      train_folds = train[train['fold'] != fold]\n","      valid_folds = train[train['fold'] == fold]\n","\n","      train_X = train_folds[features].values\n","      valid_X = valid_folds[features].values\n","      test_X = test[features].values\n","      train_labels = train_folds[target_cols].values\n","      valid_labels = valid_folds[target_cols].values\n","\n","      clf = model\n","      #model = lgb.LGBMRegressor(**params)\n","      clf.fit(train_X, train_labels,\n","              eval_set=[(valid_X, valid_labels)],\n","              #eval_metric=\"rmse\",\n","              #categorical_feature = ctg_list,\n","              verbose = 200,\n","              early_stopping_rounds=50)\n","      \n","      if isFlag:\n","        pred = model.predict(valid_X)\n","        predict_proba = model.predict_proba(valid_X)\n","        valid_folds[\"Zscore\"] = predict_proba[:,1]\n","        valid_folds[f\"{pred_name}_pred\"] = pred\n","      else:\n","        valid_folds[f\"{pred_name}_pred\"] = model.predict(valid_X)\n","        test_preds[:, fold] = model.predict(test_X)\n","      oof_df = pd.concat([oof_df, valid_folds])\n","\n","      f_importance = np.array(model.feature_importances_)\n","      temp_importance = pd.DataFrame({'feature': features, 'importance': f_importance})\n","      df_importance['importance'] += temp_importance['importance']\n","\n","      get_score(valid_labels, valid_folds[f\"{pred_name}_pred\"], isFlag)\n","\n","  df_importance['importance'] = df_importance['importance'] / np.sum(df_importance['importance'])\n","  df_importance = df_importance.sort_values('importance', ascending=False)\n","  display(df_importance.head(35))\n","  fig = plt.figure(figsize=(16, 32), tight_layout=True)\n","  sns.barplot(x=\"importance\", y=\"feature\", data=df_importance.head(35))\n","  plt.title(\"LightGBM feature importances\")\n","  get_score(oof_df[target_cols], oof_df[f\"{pred_name}_pred\"], isFlag)\n","  if isFlag:\n","    return oof_df\n","  else:\n","    return oof_df,  test_preds"],"metadata":{"id":"LJBJ3bPZjSd4","executionInfo":{"status":"ok","timestamp":1675319535795,"user_tz":-540,"elapsed":6,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["# 傾向スコアマッチング関数\n","def matching(result1, z_col='Zscore', tr_col=\"adv_flag\", match_id='id'):\n","    '''\n","    result1: 介入変数、傾向スコア、共変量のデータフレーム\n","    '''\n","    # キャリパー設定\n","    caliper = result1[z_col].std()*0.2\n","\n","    # 処置群抽出\n","    Tr = result1[result1[tr_col]>0][[match_id, z_col]].copy().reset_index(drop=True)\n","    Tr.index = Tr[match_id]\n","    # 対照群抽出\n","    Ctl = result1[result1[tr_col]==0][[match_id, z_col]].copy().reset_index(drop=True)\n","    Ctl.index = Ctl[match_id]\n","    \n","    Ctl_vals = np.copy(Ctl[z_col].to_numpy()) # 配列化\n","    Ctl_ids = np.copy(Ctl.index.to_numpy()) # 配列化\n","    Tr_vals_dict = Tr[z_col].sort_values(ascending=False).to_dict() # 処置群の傾向スコアで降順にして辞書化\n","\n","    # マッチングを実施していく\n","    match_results = [] # 結果を入れる箱\n","    for i, (cid, tr_val) in tqdm(enumerate(Tr_vals_dict.items())):\n","        # cid:user_id, tr_val:傾向スコア\n","        # argminで処置群と最も傾向スコアの差が小さい対照群のインデックス番号取得\n","        nearId = np.abs(Ctl_vals - tr_val).argmin()\n","        # 傾向スコアの差がキャリパーより大きかった場合、マッチングしない\n","        if np.abs(tr_val-Ctl_vals[nearId])>caliper:\n","            continue\n","        # 傾向スコアの差がキャリパーより小さかった場合、マッチングした者同士をリストに格納\n","        match_results.append([cid, Ctl_ids[nearId], tr_val, Ctl_vals[nearId]])\n","        # 次のマッチングで重複してマッチングしないように対照群のスコアを-9999に置き換える\n","        np.put(Ctl_vals, [nearId], -9999)\n","\n","    # リストをdf化\n","    match_results_df = pd.DataFrame(match_results, columns=['Tr', 'Ctl', 'Tr_zscore', 'Ctl_zscore'])\n","    match_results_df['diff'] = np.abs(match_results_df['Tr_zscore']-match_results_df['Ctl_zscore'])\n","    print(match_results_df['diff'].max())\n","    return match_results_df"],"metadata":{"id":"bc5rN-aQRnu8","executionInfo":{"status":"ok","timestamp":1675319535795,"user_tz":-540,"elapsed":6,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["#model1 = lgb.LGBMClassifier(**params1)\n","#flag_oof = get_pred(df, test, CFG.fold_target1, CFG.target_cols1, model1, isFlag=True)"],"metadata":{"id":"A5E2OS5VWC4q","executionInfo":{"status":"ok","timestamp":1675319535796,"user_tz":-540,"elapsed":6,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["#match_results_df = matching(flag_oof, z_col='Zscore', tr_col='adv_flag', match_id='id')\n","#display(match_results_df)"],"metadata":{"id":"i_-_pZ6mWcOH","executionInfo":{"status":"ok","timestamp":1675319535796,"user_tz":-540,"elapsed":6,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["#match_id = match_results_df.Ctl.tolist()\n","#match_train = train[train[\"id\"].isin(match_id)].reset_index(drop=True)\n","#display(match_train)"],"metadata":{"id":"_eCpRSMpW2du","executionInfo":{"status":"ok","timestamp":1675319535796,"user_tz":-540,"elapsed":6,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["model2 = lgb.LGBMRegressor(**params2)\n","oof_df, test_pred = get_pred(train, test, CFG.fold_target3, CFG.target_cols2, model2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"BdVVTJnPfUZl","executionInfo":{"status":"ok","timestamp":1675319703253,"user_tz":-540,"elapsed":167463,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}},"outputId":"0459b80d-03c8-47fc-a328-1923e725ab8e"},"execution_count":28,"outputs":[{"output_type":"display_data","data":{"text/plain":["fold\n","0    3535\n","1    3535\n","2    3535\n","3    3535\n","dtype: int64"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["===============  FOLD : 0  ===============\n","Training until validation scores don't improve for 50 rounds.\n","[200]\tvalid_0's rmse: 0.427793\n","Early stopping, best iteration is:\n","[270]\tvalid_0's rmse: 0.426446\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-23-0820502e5d4d>:42: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  valid_folds[f\"{pred_name}_pred\"] = model.predict(valid_X)\n"]},{"output_type":"stream","name":"stdout","text":["RMSE 0.4264462836808136\n","===============  FOLD : 1  ===============\n","Training until validation scores don't improve for 50 rounds.\n","[200]\tvalid_0's rmse: 0.420871\n","[400]\tvalid_0's rmse: 0.415536\n","Early stopping, best iteration is:\n","[456]\tvalid_0's rmse: 0.414962\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-23-0820502e5d4d>:42: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  valid_folds[f\"{pred_name}_pred\"] = model.predict(valid_X)\n"]},{"output_type":"stream","name":"stdout","text":["RMSE 0.41496178127436084\n","===============  FOLD : 2  ===============\n","Training until validation scores don't improve for 50 rounds.\n","[200]\tvalid_0's rmse: 0.407708\n","Early stopping, best iteration is:\n","[327]\tvalid_0's rmse: 0.402718\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-23-0820502e5d4d>:42: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  valid_folds[f\"{pred_name}_pred\"] = model.predict(valid_X)\n"]},{"output_type":"stream","name":"stdout","text":["RMSE 0.402717928161488\n","===============  FOLD : 3  ===============\n","Training until validation scores don't improve for 50 rounds.\n","[200]\tvalid_0's rmse: 0.424877\n","[400]\tvalid_0's rmse: 0.418445\n","Early stopping, best iteration is:\n","[483]\tvalid_0's rmse: 0.417873\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-23-0820502e5d4d>:42: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  valid_folds[f\"{pred_name}_pred\"] = model.predict(valid_X)\n"]},{"output_type":"stream","name":"stdout","text":["RMSE 0.4178705472332465\n"]},{"output_type":"display_data","data":{"text/plain":["             feature  importance\n","269           MAX_CI    0.013064\n","281         warm_sst    0.011220\n","256            fetch    0.010373\n","5      hist_warm_sst    0.009809\n","162        VARIgreen    0.009375\n","297          sst_ymd    0.008963\n","147            depth    0.008615\n","228           MIN_IF    0.008594\n","260              lat    0.008529\n","64          MIN_GARI    0.007574\n","244           MAX_IF    0.007552\n","280         sst_diff    0.007422\n","105          MED_WVP    0.007313\n","9              TIRS2    0.007248\n","137          MAX_MVI    0.007227\n","107       river_dist    0.007010\n","295         MAX_NBR2    0.006879\n","302          MED_MVI    0.006706\n","173            month    0.006641\n","66           MAX_BGI    0.006619\n","210        MIN_Datt1    0.006554\n","95            MED_IF    0.006359\n","144         MED_NBR2    0.006163\n","104          MIN_BGI    0.006141\n","285  MED_MCARI_MTVI2    0.006098\n","81          MIN_NBR2    0.006076\n","11           MED_mSR    0.006055\n","103  MAX_MCARI_MTVI2    0.006055\n","225        MIN_mNDVI    0.006055\n","242            TIRS1    0.006033\n","163     beach_length    0.005990\n","127        MAX_mNDVI    0.005924\n","40               GLI    0.005881\n","265        MAX_Datt1    0.005773\n","84         MAX_NDFI2    0.005773"],"text/html":["\n","  <div id=\"df-fb170c0c-f03d-499c-9b57-6ba8b8e34138\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>feature</th>\n","      <th>importance</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>269</th>\n","      <td>MAX_CI</td>\n","      <td>0.013064</td>\n","    </tr>\n","    <tr>\n","      <th>281</th>\n","      <td>warm_sst</td>\n","      <td>0.011220</td>\n","    </tr>\n","    <tr>\n","      <th>256</th>\n","      <td>fetch</td>\n","      <td>0.010373</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>hist_warm_sst</td>\n","      <td>0.009809</td>\n","    </tr>\n","    <tr>\n","      <th>162</th>\n","      <td>VARIgreen</td>\n","      <td>0.009375</td>\n","    </tr>\n","    <tr>\n","      <th>297</th>\n","      <td>sst_ymd</td>\n","      <td>0.008963</td>\n","    </tr>\n","    <tr>\n","      <th>147</th>\n","      <td>depth</td>\n","      <td>0.008615</td>\n","    </tr>\n","    <tr>\n","      <th>228</th>\n","      <td>MIN_IF</td>\n","      <td>0.008594</td>\n","    </tr>\n","    <tr>\n","      <th>260</th>\n","      <td>lat</td>\n","      <td>0.008529</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>MIN_GARI</td>\n","      <td>0.007574</td>\n","    </tr>\n","    <tr>\n","      <th>244</th>\n","      <td>MAX_IF</td>\n","      <td>0.007552</td>\n","    </tr>\n","    <tr>\n","      <th>280</th>\n","      <td>sst_diff</td>\n","      <td>0.007422</td>\n","    </tr>\n","    <tr>\n","      <th>105</th>\n","      <td>MED_WVP</td>\n","      <td>0.007313</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>TIRS2</td>\n","      <td>0.007248</td>\n","    </tr>\n","    <tr>\n","      <th>137</th>\n","      <td>MAX_MVI</td>\n","      <td>0.007227</td>\n","    </tr>\n","    <tr>\n","      <th>107</th>\n","      <td>river_dist</td>\n","      <td>0.007010</td>\n","    </tr>\n","    <tr>\n","      <th>295</th>\n","      <td>MAX_NBR2</td>\n","      <td>0.006879</td>\n","    </tr>\n","    <tr>\n","      <th>302</th>\n","      <td>MED_MVI</td>\n","      <td>0.006706</td>\n","    </tr>\n","    <tr>\n","      <th>173</th>\n","      <td>month</td>\n","      <td>0.006641</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>MAX_BGI</td>\n","      <td>0.006619</td>\n","    </tr>\n","    <tr>\n","      <th>210</th>\n","      <td>MIN_Datt1</td>\n","      <td>0.006554</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>MED_IF</td>\n","      <td>0.006359</td>\n","    </tr>\n","    <tr>\n","      <th>144</th>\n","      <td>MED_NBR2</td>\n","      <td>0.006163</td>\n","    </tr>\n","    <tr>\n","      <th>104</th>\n","      <td>MIN_BGI</td>\n","      <td>0.006141</td>\n","    </tr>\n","    <tr>\n","      <th>285</th>\n","      <td>MED_MCARI_MTVI2</td>\n","      <td>0.006098</td>\n","    </tr>\n","    <tr>\n","      <th>81</th>\n","      <td>MIN_NBR2</td>\n","      <td>0.006076</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>MED_mSR</td>\n","      <td>0.006055</td>\n","    </tr>\n","    <tr>\n","      <th>103</th>\n","      <td>MAX_MCARI_MTVI2</td>\n","      <td>0.006055</td>\n","    </tr>\n","    <tr>\n","      <th>225</th>\n","      <td>MIN_mNDVI</td>\n","      <td>0.006055</td>\n","    </tr>\n","    <tr>\n","      <th>242</th>\n","      <td>TIRS1</td>\n","      <td>0.006033</td>\n","    </tr>\n","    <tr>\n","      <th>163</th>\n","      <td>beach_length</td>\n","      <td>0.005990</td>\n","    </tr>\n","    <tr>\n","      <th>127</th>\n","      <td>MAX_mNDVI</td>\n","      <td>0.005924</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>GLI</td>\n","      <td>0.005881</td>\n","    </tr>\n","    <tr>\n","      <th>265</th>\n","      <td>MAX_Datt1</td>\n","      <td>0.005773</td>\n","    </tr>\n","    <tr>\n","      <th>84</th>\n","      <td>MAX_NDFI2</td>\n","      <td>0.005773</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fb170c0c-f03d-499c-9b57-6ba8b8e34138')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-fb170c0c-f03d-499c-9b57-6ba8b8e34138 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-fb170c0c-f03d-499c-9b57-6ba8b8e34138');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["RMSE 0.4155861031998248\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1152x2304 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["cover_max = train.cover.max()\n","_oof = oof_df.copy()\n","_oof[\"pred\"] = np.expm1(_oof[\"_pred\"]) / _oof[\"area\"]\n","_oof[\"pred\"] = _oof[\"pred\"].apply(lambda x: x if x>0 else 0)\n","_oof[\"pred\"] = _oof[\"pred\"].apply(lambda x: x if x<1 else cover_max)\n","get_score(_oof[\"cover\"], _oof[\"pred\"])"],"metadata":{"id":"6-siUgjdjujr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675319703253,"user_tz":-540,"elapsed":15,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}},"outputId":"233f41cd-8ecf-434b-ba80-8f4c8217aa42"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE 0.12835307807996849\n"]}]},{"cell_type":"code","source":["plt.hist(_oof.pred, label='pred', bins=25, edgecolor='white', alpha=.6)\n","plt.hist(_oof.cover, label=\"label\", bins=25, edgecolor='white', alpha=.6)\n","plt.xlabel(\"Pred\")\n","plt.legend()\n","plt.show()"],"metadata":{"id":"HZF0Qi9quUR2","executionInfo":{"status":"ok","timestamp":1675319703949,"user_tz":-540,"elapsed":707,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}},"colab":{"base_uri":"https://localhost:8080/","height":279},"outputId":"ce39236b-4173-480b-e89b-a50b5e1eec88"},"execution_count":30,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["pred_df = test.copy()\n","pred_df[\"pred_area_log\"] = np.mean(test_pred, axis=1)\n","\n","pred_df[\"pred\"] = np.expm1(pred_df[\"pred_area_log\"]) / pred_df['area']\n","pred_df = pred_df.sort_index()\n","pred_df"],"metadata":{"id":"HUH6Ghijn_nC","executionInfo":{"status":"ok","timestamp":1675319703949,"user_tz":-540,"elapsed":10,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}},"colab":{"base_uri":"https://localhost:8080/","height":557},"outputId":"786fda70-f92e-4be9-f4ae-192aacca6ce5"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        id        lat         lon   area  \\\n","0        0  24.352222  124.202674   20.0   \n","1        1  24.420028  124.078583   20.0   \n","2        2  26.494197  127.836013  100.0   \n","3        3  26.183639  127.319361   20.0   \n","4        4  24.761089  125.269009   20.0   \n","...    ...        ...         ...    ...   \n","4034  4034  26.702075  127.873347   20.0   \n","4035  4035  24.337028  124.232694   20.0   \n","4036  4036  26.493121  127.839918  100.0   \n","4037  4037  24.068778  123.804194   20.0   \n","4038  4038  24.791766  125.250825   20.0   \n","\n","                                                    YMD    year  month  \\\n","0                                               2002.12  2002.0   12.0   \n","1                                              20100723  2010.0    7.0   \n","2     2004.2.20-2004.2.22,2004.2.27-2004.2.29,2004.3...  2004.0    2.0   \n","3                                              20100805  2010.0    8.0   \n","4                                                   NaN  2019.0   10.0   \n","...                                                 ...     ...    ...   \n","4034                                                NaN  2019.0    9.0   \n","4035                                           20101122  2010.0   11.0   \n","4036  2004.2.20-2004.2.22,2004.2.27-2004.2.29,2004.3...  2004.0    2.0   \n","4037                                           20110415  2011.0    4.0   \n","4038                                                NaN  2019.0   10.0   \n","\n","      depth_original  cliff_length  aicial_length  ...  MIN_PSNDc2_2020  \\\n","0                0.5      0.000000     725.621704  ...        -0.560810   \n","1                NaN      0.000000       0.000000  ...        -0.824888   \n","2               13.8     73.183418      80.595177  ...        -0.861477   \n","3                NaN      0.000000       0.000000  ...        -0.863338   \n","4               -0.5      0.000000      34.796036  ...        -0.824787   \n","...              ...           ...            ...  ...              ...   \n","4034             0.4      0.000000      20.594961  ...        -0.861148   \n","4035             NaN      0.000000       0.000000  ...        -0.833596   \n","4036             0.1     76.439651     133.127228  ...        -0.843974   \n","4037             NaN     73.660492       0.000000  ...        -0.788681   \n","4038             0.2      0.000000      46.460155  ...        -0.907907   \n","\n","      MIN_RDVI_2020  MIN_IF_2020  MIN_SLAVI_2020  MIN_SIPI2_2020  \\\n","0         -3.203797     4.297234      926.905329        1.669992   \n","1         -2.222276     2.263106       57.661693        4.274851   \n","2         -2.060505     2.099250       42.672829        5.655713   \n","3         -2.708627   -10.433323       45.061952        1.546086   \n","4         -5.249625     2.563503       80.374689        1.827876   \n","...             ...          ...             ...             ...   \n","4034      -3.207146     3.633575       60.936945        3.053976   \n","4035      -2.385447     2.495430       75.231230        3.946128   \n","4036      -4.397375     4.403977      117.513676        1.904304   \n","4037      -3.821984     2.203933      121.654726        2.282056   \n","4038      -5.638793     7.080204      128.096108        1.783276   \n","\n","      MIN_VARIgreen_2020   mesh20  adv_flag  pred_area_log      pred  \n","0               0.194766  3624_20         1       0.312886  0.018368  \n","1             -79.273275  3624_20         1       0.944581  0.078587  \n","2              -2.061417  3927_23         1       2.080296  0.070068  \n","3             -14.527890  3927_11         1       0.675673  0.048268  \n","4              -6.335208  3725_01         1       1.174238  0.111784  \n","...                  ...      ...       ...            ...       ...  \n","4034          -28.354402  4027_03         1       0.211695  0.011789  \n","4035           -2.112646  3624_20         1       0.628673  0.043756  \n","4036            0.601280  3927_23         1       2.628373  0.128512  \n","4037           -2.029225  3623_03         1       1.202977  0.116501  \n","4038            0.646303  3725_01         1       1.599624  0.197559  \n","\n","[4039 rows x 3467 columns]"],"text/html":["\n","  <div id=\"df-00e5abc4-08b6-48b2-a285-4debe04ae50c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>lat</th>\n","      <th>lon</th>\n","      <th>area</th>\n","      <th>YMD</th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>depth_original</th>\n","      <th>cliff_length</th>\n","      <th>aicial_length</th>\n","      <th>...</th>\n","      <th>MIN_PSNDc2_2020</th>\n","      <th>MIN_RDVI_2020</th>\n","      <th>MIN_IF_2020</th>\n","      <th>MIN_SLAVI_2020</th>\n","      <th>MIN_SIPI2_2020</th>\n","      <th>MIN_VARIgreen_2020</th>\n","      <th>mesh20</th>\n","      <th>adv_flag</th>\n","      <th>pred_area_log</th>\n","      <th>pred</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>24.352222</td>\n","      <td>124.202674</td>\n","      <td>20.0</td>\n","      <td>2002.12</td>\n","      <td>2002.0</td>\n","      <td>12.0</td>\n","      <td>0.5</td>\n","      <td>0.000000</td>\n","      <td>725.621704</td>\n","      <td>...</td>\n","      <td>-0.560810</td>\n","      <td>-3.203797</td>\n","      <td>4.297234</td>\n","      <td>926.905329</td>\n","      <td>1.669992</td>\n","      <td>0.194766</td>\n","      <td>3624_20</td>\n","      <td>1</td>\n","      <td>0.312886</td>\n","      <td>0.018368</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>24.420028</td>\n","      <td>124.078583</td>\n","      <td>20.0</td>\n","      <td>20100723</td>\n","      <td>2010.0</td>\n","      <td>7.0</td>\n","      <td>NaN</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>-0.824888</td>\n","      <td>-2.222276</td>\n","      <td>2.263106</td>\n","      <td>57.661693</td>\n","      <td>4.274851</td>\n","      <td>-79.273275</td>\n","      <td>3624_20</td>\n","      <td>1</td>\n","      <td>0.944581</td>\n","      <td>0.078587</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>26.494197</td>\n","      <td>127.836013</td>\n","      <td>100.0</td>\n","      <td>2004.2.20-2004.2.22,2004.2.27-2004.2.29,2004.3...</td>\n","      <td>2004.0</td>\n","      <td>2.0</td>\n","      <td>13.8</td>\n","      <td>73.183418</td>\n","      <td>80.595177</td>\n","      <td>...</td>\n","      <td>-0.861477</td>\n","      <td>-2.060505</td>\n","      <td>2.099250</td>\n","      <td>42.672829</td>\n","      <td>5.655713</td>\n","      <td>-2.061417</td>\n","      <td>3927_23</td>\n","      <td>1</td>\n","      <td>2.080296</td>\n","      <td>0.070068</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>26.183639</td>\n","      <td>127.319361</td>\n","      <td>20.0</td>\n","      <td>20100805</td>\n","      <td>2010.0</td>\n","      <td>8.0</td>\n","      <td>NaN</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>-0.863338</td>\n","      <td>-2.708627</td>\n","      <td>-10.433323</td>\n","      <td>45.061952</td>\n","      <td>1.546086</td>\n","      <td>-14.527890</td>\n","      <td>3927_11</td>\n","      <td>1</td>\n","      <td>0.675673</td>\n","      <td>0.048268</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>24.761089</td>\n","      <td>125.269009</td>\n","      <td>20.0</td>\n","      <td>NaN</td>\n","      <td>2019.0</td>\n","      <td>10.0</td>\n","      <td>-0.5</td>\n","      <td>0.000000</td>\n","      <td>34.796036</td>\n","      <td>...</td>\n","      <td>-0.824787</td>\n","      <td>-5.249625</td>\n","      <td>2.563503</td>\n","      <td>80.374689</td>\n","      <td>1.827876</td>\n","      <td>-6.335208</td>\n","      <td>3725_01</td>\n","      <td>1</td>\n","      <td>1.174238</td>\n","      <td>0.111784</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4034</th>\n","      <td>4034</td>\n","      <td>26.702075</td>\n","      <td>127.873347</td>\n","      <td>20.0</td>\n","      <td>NaN</td>\n","      <td>2019.0</td>\n","      <td>9.0</td>\n","      <td>0.4</td>\n","      <td>0.000000</td>\n","      <td>20.594961</td>\n","      <td>...</td>\n","      <td>-0.861148</td>\n","      <td>-3.207146</td>\n","      <td>3.633575</td>\n","      <td>60.936945</td>\n","      <td>3.053976</td>\n","      <td>-28.354402</td>\n","      <td>4027_03</td>\n","      <td>1</td>\n","      <td>0.211695</td>\n","      <td>0.011789</td>\n","    </tr>\n","    <tr>\n","      <th>4035</th>\n","      <td>4035</td>\n","      <td>24.337028</td>\n","      <td>124.232694</td>\n","      <td>20.0</td>\n","      <td>20101122</td>\n","      <td>2010.0</td>\n","      <td>11.0</td>\n","      <td>NaN</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>-0.833596</td>\n","      <td>-2.385447</td>\n","      <td>2.495430</td>\n","      <td>75.231230</td>\n","      <td>3.946128</td>\n","      <td>-2.112646</td>\n","      <td>3624_20</td>\n","      <td>1</td>\n","      <td>0.628673</td>\n","      <td>0.043756</td>\n","    </tr>\n","    <tr>\n","      <th>4036</th>\n","      <td>4036</td>\n","      <td>26.493121</td>\n","      <td>127.839918</td>\n","      <td>100.0</td>\n","      <td>2004.2.20-2004.2.22,2004.2.27-2004.2.29,2004.3...</td>\n","      <td>2004.0</td>\n","      <td>2.0</td>\n","      <td>0.1</td>\n","      <td>76.439651</td>\n","      <td>133.127228</td>\n","      <td>...</td>\n","      <td>-0.843974</td>\n","      <td>-4.397375</td>\n","      <td>4.403977</td>\n","      <td>117.513676</td>\n","      <td>1.904304</td>\n","      <td>0.601280</td>\n","      <td>3927_23</td>\n","      <td>1</td>\n","      <td>2.628373</td>\n","      <td>0.128512</td>\n","    </tr>\n","    <tr>\n","      <th>4037</th>\n","      <td>4037</td>\n","      <td>24.068778</td>\n","      <td>123.804194</td>\n","      <td>20.0</td>\n","      <td>20110415</td>\n","      <td>2011.0</td>\n","      <td>4.0</td>\n","      <td>NaN</td>\n","      <td>73.660492</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>-0.788681</td>\n","      <td>-3.821984</td>\n","      <td>2.203933</td>\n","      <td>121.654726</td>\n","      <td>2.282056</td>\n","      <td>-2.029225</td>\n","      <td>3623_03</td>\n","      <td>1</td>\n","      <td>1.202977</td>\n","      <td>0.116501</td>\n","    </tr>\n","    <tr>\n","      <th>4038</th>\n","      <td>4038</td>\n","      <td>24.791766</td>\n","      <td>125.250825</td>\n","      <td>20.0</td>\n","      <td>NaN</td>\n","      <td>2019.0</td>\n","      <td>10.0</td>\n","      <td>0.2</td>\n","      <td>0.000000</td>\n","      <td>46.460155</td>\n","      <td>...</td>\n","      <td>-0.907907</td>\n","      <td>-5.638793</td>\n","      <td>7.080204</td>\n","      <td>128.096108</td>\n","      <td>1.783276</td>\n","      <td>0.646303</td>\n","      <td>3725_01</td>\n","      <td>1</td>\n","      <td>1.599624</td>\n","      <td>0.197559</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4039 rows × 3467 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-00e5abc4-08b6-48b2-a285-4debe04ae50c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-00e5abc4-08b6-48b2-a285-4debe04ae50c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-00e5abc4-08b6-48b2-a285-4debe04ae50c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["pred_df[\"pred\"] = pred_df[\"pred\"].apply(lambda x: x if x>0 else 0)\n","pred_df[\"pred\"] = pred_df[\"pred\"].apply(lambda x: x if x<1 else 1)\n","pred_df[[\"pred\"]].to_csv(os.path.join(OUTPUT_DIR, f'submit_{CFG.model}_seed{CFG.seed}_ver{CFG.ver}.csv'), header=False)\n","\n","plt.hist(pred_df.pred,bins=25,edgecolor='white')\n","plt.xlabel(\"Pred\")\n","plt.show()\n","\n","display(pred_df)"],"metadata":{"id":"xMm76_sT1fw-","executionInfo":{"status":"ok","timestamp":1675319703950,"user_tz":-540,"elapsed":9,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}},"colab":{"base_uri":"https://localhost:8080/","height":819},"outputId":"41e0c5c1-013e-42de-adcc-7764e9c31f83"},"execution_count":32,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["        id        lat         lon   area  \\\n","0        0  24.352222  124.202674   20.0   \n","1        1  24.420028  124.078583   20.0   \n","2        2  26.494197  127.836013  100.0   \n","3        3  26.183639  127.319361   20.0   \n","4        4  24.761089  125.269009   20.0   \n","...    ...        ...         ...    ...   \n","4034  4034  26.702075  127.873347   20.0   \n","4035  4035  24.337028  124.232694   20.0   \n","4036  4036  26.493121  127.839918  100.0   \n","4037  4037  24.068778  123.804194   20.0   \n","4038  4038  24.791766  125.250825   20.0   \n","\n","                                                    YMD    year  month  \\\n","0                                               2002.12  2002.0   12.0   \n","1                                              20100723  2010.0    7.0   \n","2     2004.2.20-2004.2.22,2004.2.27-2004.2.29,2004.3...  2004.0    2.0   \n","3                                              20100805  2010.0    8.0   \n","4                                                   NaN  2019.0   10.0   \n","...                                                 ...     ...    ...   \n","4034                                                NaN  2019.0    9.0   \n","4035                                           20101122  2010.0   11.0   \n","4036  2004.2.20-2004.2.22,2004.2.27-2004.2.29,2004.3...  2004.0    2.0   \n","4037                                           20110415  2011.0    4.0   \n","4038                                                NaN  2019.0   10.0   \n","\n","      depth_original  cliff_length  aicial_length  ...  MIN_PSNDc2_2020  \\\n","0                0.5      0.000000     725.621704  ...        -0.560810   \n","1                NaN      0.000000       0.000000  ...        -0.824888   \n","2               13.8     73.183418      80.595177  ...        -0.861477   \n","3                NaN      0.000000       0.000000  ...        -0.863338   \n","4               -0.5      0.000000      34.796036  ...        -0.824787   \n","...              ...           ...            ...  ...              ...   \n","4034             0.4      0.000000      20.594961  ...        -0.861148   \n","4035             NaN      0.000000       0.000000  ...        -0.833596   \n","4036             0.1     76.439651     133.127228  ...        -0.843974   \n","4037             NaN     73.660492       0.000000  ...        -0.788681   \n","4038             0.2      0.000000      46.460155  ...        -0.907907   \n","\n","      MIN_RDVI_2020  MIN_IF_2020  MIN_SLAVI_2020  MIN_SIPI2_2020  \\\n","0         -3.203797     4.297234      926.905329        1.669992   \n","1         -2.222276     2.263106       57.661693        4.274851   \n","2         -2.060505     2.099250       42.672829        5.655713   \n","3         -2.708627   -10.433323       45.061952        1.546086   \n","4         -5.249625     2.563503       80.374689        1.827876   \n","...             ...          ...             ...             ...   \n","4034      -3.207146     3.633575       60.936945        3.053976   \n","4035      -2.385447     2.495430       75.231230        3.946128   \n","4036      -4.397375     4.403977      117.513676        1.904304   \n","4037      -3.821984     2.203933      121.654726        2.282056   \n","4038      -5.638793     7.080204      128.096108        1.783276   \n","\n","      MIN_VARIgreen_2020   mesh20  adv_flag  pred_area_log      pred  \n","0               0.194766  3624_20         1       0.312886  0.018368  \n","1             -79.273275  3624_20         1       0.944581  0.078587  \n","2              -2.061417  3927_23         1       2.080296  0.070068  \n","3             -14.527890  3927_11         1       0.675673  0.048268  \n","4              -6.335208  3725_01         1       1.174238  0.111784  \n","...                  ...      ...       ...            ...       ...  \n","4034          -28.354402  4027_03         1       0.211695  0.011789  \n","4035           -2.112646  3624_20         1       0.628673  0.043756  \n","4036            0.601280  3927_23         1       2.628373  0.128512  \n","4037           -2.029225  3623_03         1       1.202977  0.116501  \n","4038            0.646303  3725_01         1       1.599624  0.197559  \n","\n","[4039 rows x 3467 columns]"],"text/html":["\n","  <div id=\"df-57708a9b-5b87-4d2e-8f42-bb19f47e416c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>lat</th>\n","      <th>lon</th>\n","      <th>area</th>\n","      <th>YMD</th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>depth_original</th>\n","      <th>cliff_length</th>\n","      <th>aicial_length</th>\n","      <th>...</th>\n","      <th>MIN_PSNDc2_2020</th>\n","      <th>MIN_RDVI_2020</th>\n","      <th>MIN_IF_2020</th>\n","      <th>MIN_SLAVI_2020</th>\n","      <th>MIN_SIPI2_2020</th>\n","      <th>MIN_VARIgreen_2020</th>\n","      <th>mesh20</th>\n","      <th>adv_flag</th>\n","      <th>pred_area_log</th>\n","      <th>pred</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>24.352222</td>\n","      <td>124.202674</td>\n","      <td>20.0</td>\n","      <td>2002.12</td>\n","      <td>2002.0</td>\n","      <td>12.0</td>\n","      <td>0.5</td>\n","      <td>0.000000</td>\n","      <td>725.621704</td>\n","      <td>...</td>\n","      <td>-0.560810</td>\n","      <td>-3.203797</td>\n","      <td>4.297234</td>\n","      <td>926.905329</td>\n","      <td>1.669992</td>\n","      <td>0.194766</td>\n","      <td>3624_20</td>\n","      <td>1</td>\n","      <td>0.312886</td>\n","      <td>0.018368</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>24.420028</td>\n","      <td>124.078583</td>\n","      <td>20.0</td>\n","      <td>20100723</td>\n","      <td>2010.0</td>\n","      <td>7.0</td>\n","      <td>NaN</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>-0.824888</td>\n","      <td>-2.222276</td>\n","      <td>2.263106</td>\n","      <td>57.661693</td>\n","      <td>4.274851</td>\n","      <td>-79.273275</td>\n","      <td>3624_20</td>\n","      <td>1</td>\n","      <td>0.944581</td>\n","      <td>0.078587</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>26.494197</td>\n","      <td>127.836013</td>\n","      <td>100.0</td>\n","      <td>2004.2.20-2004.2.22,2004.2.27-2004.2.29,2004.3...</td>\n","      <td>2004.0</td>\n","      <td>2.0</td>\n","      <td>13.8</td>\n","      <td>73.183418</td>\n","      <td>80.595177</td>\n","      <td>...</td>\n","      <td>-0.861477</td>\n","      <td>-2.060505</td>\n","      <td>2.099250</td>\n","      <td>42.672829</td>\n","      <td>5.655713</td>\n","      <td>-2.061417</td>\n","      <td>3927_23</td>\n","      <td>1</td>\n","      <td>2.080296</td>\n","      <td>0.070068</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>26.183639</td>\n","      <td>127.319361</td>\n","      <td>20.0</td>\n","      <td>20100805</td>\n","      <td>2010.0</td>\n","      <td>8.0</td>\n","      <td>NaN</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>-0.863338</td>\n","      <td>-2.708627</td>\n","      <td>-10.433323</td>\n","      <td>45.061952</td>\n","      <td>1.546086</td>\n","      <td>-14.527890</td>\n","      <td>3927_11</td>\n","      <td>1</td>\n","      <td>0.675673</td>\n","      <td>0.048268</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>24.761089</td>\n","      <td>125.269009</td>\n","      <td>20.0</td>\n","      <td>NaN</td>\n","      <td>2019.0</td>\n","      <td>10.0</td>\n","      <td>-0.5</td>\n","      <td>0.000000</td>\n","      <td>34.796036</td>\n","      <td>...</td>\n","      <td>-0.824787</td>\n","      <td>-5.249625</td>\n","      <td>2.563503</td>\n","      <td>80.374689</td>\n","      <td>1.827876</td>\n","      <td>-6.335208</td>\n","      <td>3725_01</td>\n","      <td>1</td>\n","      <td>1.174238</td>\n","      <td>0.111784</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4034</th>\n","      <td>4034</td>\n","      <td>26.702075</td>\n","      <td>127.873347</td>\n","      <td>20.0</td>\n","      <td>NaN</td>\n","      <td>2019.0</td>\n","      <td>9.0</td>\n","      <td>0.4</td>\n","      <td>0.000000</td>\n","      <td>20.594961</td>\n","      <td>...</td>\n","      <td>-0.861148</td>\n","      <td>-3.207146</td>\n","      <td>3.633575</td>\n","      <td>60.936945</td>\n","      <td>3.053976</td>\n","      <td>-28.354402</td>\n","      <td>4027_03</td>\n","      <td>1</td>\n","      <td>0.211695</td>\n","      <td>0.011789</td>\n","    </tr>\n","    <tr>\n","      <th>4035</th>\n","      <td>4035</td>\n","      <td>24.337028</td>\n","      <td>124.232694</td>\n","      <td>20.0</td>\n","      <td>20101122</td>\n","      <td>2010.0</td>\n","      <td>11.0</td>\n","      <td>NaN</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>-0.833596</td>\n","      <td>-2.385447</td>\n","      <td>2.495430</td>\n","      <td>75.231230</td>\n","      <td>3.946128</td>\n","      <td>-2.112646</td>\n","      <td>3624_20</td>\n","      <td>1</td>\n","      <td>0.628673</td>\n","      <td>0.043756</td>\n","    </tr>\n","    <tr>\n","      <th>4036</th>\n","      <td>4036</td>\n","      <td>26.493121</td>\n","      <td>127.839918</td>\n","      <td>100.0</td>\n","      <td>2004.2.20-2004.2.22,2004.2.27-2004.2.29,2004.3...</td>\n","      <td>2004.0</td>\n","      <td>2.0</td>\n","      <td>0.1</td>\n","      <td>76.439651</td>\n","      <td>133.127228</td>\n","      <td>...</td>\n","      <td>-0.843974</td>\n","      <td>-4.397375</td>\n","      <td>4.403977</td>\n","      <td>117.513676</td>\n","      <td>1.904304</td>\n","      <td>0.601280</td>\n","      <td>3927_23</td>\n","      <td>1</td>\n","      <td>2.628373</td>\n","      <td>0.128512</td>\n","    </tr>\n","    <tr>\n","      <th>4037</th>\n","      <td>4037</td>\n","      <td>24.068778</td>\n","      <td>123.804194</td>\n","      <td>20.0</td>\n","      <td>20110415</td>\n","      <td>2011.0</td>\n","      <td>4.0</td>\n","      <td>NaN</td>\n","      <td>73.660492</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>-0.788681</td>\n","      <td>-3.821984</td>\n","      <td>2.203933</td>\n","      <td>121.654726</td>\n","      <td>2.282056</td>\n","      <td>-2.029225</td>\n","      <td>3623_03</td>\n","      <td>1</td>\n","      <td>1.202977</td>\n","      <td>0.116501</td>\n","    </tr>\n","    <tr>\n","      <th>4038</th>\n","      <td>4038</td>\n","      <td>24.791766</td>\n","      <td>125.250825</td>\n","      <td>20.0</td>\n","      <td>NaN</td>\n","      <td>2019.0</td>\n","      <td>10.0</td>\n","      <td>0.2</td>\n","      <td>0.000000</td>\n","      <td>46.460155</td>\n","      <td>...</td>\n","      <td>-0.907907</td>\n","      <td>-5.638793</td>\n","      <td>7.080204</td>\n","      <td>128.096108</td>\n","      <td>1.783276</td>\n","      <td>0.646303</td>\n","      <td>3725_01</td>\n","      <td>1</td>\n","      <td>1.599624</td>\n","      <td>0.197559</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4039 rows × 3467 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-57708a9b-5b87-4d2e-8f42-bb19f47e416c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-57708a9b-5b87-4d2e-8f42-bb19f47e416c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-57708a9b-5b87-4d2e-8f42-bb19f47e416c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"lKA3swMPx9Ag","executionInfo":{"status":"ok","timestamp":1675319703950,"user_tz":-540,"elapsed":8,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":32,"outputs":[]}]}